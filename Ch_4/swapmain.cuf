! N.B.: the thread block cluster feature only available on devices with computer power of >= 9

! Example of distributed shared memory where a single cluster of two thread blocks
! uses distributed shared memory to swap halves of an array.

module m 
    integer, parameter :: nx = 64 
    integer, parameter :: readRemoteSharedMemory = 1 
    integer, parameter :: writeRemoteSharedMemory = 2 
contains 
    attributes(global) cluster_dims(2,1,1) subroutine swap(a, b, mode)
        use cooperative_groups 
        implicit none 
        integer, device :: a(nx), b(nx)
        integer, value :: mode 

        type(cluster_group) :: cluster 
        integer, shared :: s(nx/2)
        integer, shared :: ds(n/2); pointer(dsPtr, ds)
        integer :: i, tibIdx, tibDim, ticIdx, bicIdx 

        cluster = this_cluster() 

        tibIdx = threadIdx%x    ! thread index in block 
        tibDim = blockDim%x     ! number of threads in block 
        bicIdx = cluster%rank   ! block index in cluster 
        ticIdx = (bicIdx-1)*tibDim + tibIdx ! thread index in cluster

        s(tibIdx) = 0 
        call syncthreads(cluster)

        ! get pointer to other block's shared memory 
        if (cluster%rank == 1) then 
            dsPtr = cluster_map_shared_rank(s, 2)
        else 
            dsPtr = cluster_map_shared_rank(s, 1)
        end if 
        ! assigning half of the contents of the global memory array a() to 
        ! shared memory, then copies shared mem to half of global array b()
        
        if (mode == readremoteSharedMemory) then 
            s(tibIdx) = a(ticIdx) ! write to local shared memory 
            call syncthreads(cluster)
            b(ticIdx) = ds(tibIdx) ! read from remote shared memory
            call syncthreads(cluster) ! ensure remote read finishes before exit 
        else ! writeRemoteSharedMemory 
            ds(tibIdx) = a(ticIdx) ! write to remote shared memory 
            call syncthreads(cluster)
            b(ticIdx) = s(tibIdx) ! read from local shared memory 
        end if 
    end subroutine swap 
end module m 

program main 
    use m 
    use cudafor 
    implicit none 
    integer :: a(nx), b(nx), gold(nx)
    integer, device :: a_d(nx), b_d(nx)
    integer :: i 

    do  i = 1, nx 
        a(i) = i 
    enddo 

    gold(1:nx/2) = a(nx/2+1:nx)
    gold(nx/2+1:nx) = a(1:nx/2) 

    a_d = a 
    b_d = -1

    call swap<<<2,nx/2>>>(a_d, b_d, readRemoteSharedMemory)
    b = b_d 
    print *, 'Remote read maxval(abs(gold-b))   ', maxval(abs(gold-b))

    b_d = -1
    call swap<<<2,nx/2>>>(a_d, b_d, writeRemoteSharedMemory)
    b = b_d 
    print *, 'Remote write maxval(abs(gold-b)): ', maxval(abs(gold-b))
end program main

